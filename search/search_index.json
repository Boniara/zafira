{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Zafira is a central automation reporting system that is built on top of Java Spring Framework. It dramatically increases the transparency of test automation results and provides better understanding of product quality. Qaprosoft team is developing Zafira based on more than 10-year expertise in quality assurance, and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework , but you are able to integrate Zafira client into your own automation tool. We are actively developing clients for different languages and frameworks but still looking for an active community to provide better support. Primary features Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to create automation reports and send them via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Overview"},{"location":"#introduction","text":"Zafira is a central automation reporting system that is built on top of Java Spring Framework. It dramatically increases the transparency of test automation results and provides better understanding of product quality. Qaprosoft team is developing Zafira based on more than 10-year expertise in quality assurance, and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework , but you are able to integrate Zafira client into your own automation tool. We are actively developing clients for different languages and frameworks but still looking for an active community to provide better support.","title":"Introduction"},{"location":"#primary-features","text":"Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to create automation reports and send them via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Primary features"},{"location":"client_setup/","text":"Client setup Access token Zafira provides REST API to track test automation results (use Swagger to learn API). You have different options to integrate your test client. Carina automation framework integrates with Zafira under the hood. Regardless of the integration flow you've selected, first of all, you will need an access token generated. Navigate to Username Profile in the top navigation menu: Scroll down and generate a new access token: Zafira uses stateless authentication using JWT technology. In general, clients' stores refresh the token used to generate an access token with a 5-hour expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All the HTTP calls that require authorization context should contain the header: Authorizarion: Bearer auth_token Integration with Carina Carina automation framework tracks test results in Zafira by default, all you need is a valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify the following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default, zafira_project=UNKNOWN , but using admin user you are able to create multiple projects via Zafira UI (Top menu Project Create). When a new project is created, you may override the zafira_project property and track the results in an appropriate context. Integration with TestNG If you are implementing your own TestNG-based automation project, you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place it in the resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] } Languages and frameworks supported Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Client setup"},{"location":"client_setup/#client-setup","text":"","title":"Client setup"},{"location":"client_setup/#access-token","text":"Zafira provides REST API to track test automation results (use Swagger to learn API). You have different options to integrate your test client. Carina automation framework integrates with Zafira under the hood. Regardless of the integration flow you've selected, first of all, you will need an access token generated. Navigate to Username Profile in the top navigation menu: Scroll down and generate a new access token: Zafira uses stateless authentication using JWT technology. In general, clients' stores refresh the token used to generate an access token with a 5-hour expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All the HTTP calls that require authorization context should contain the header: Authorizarion: Bearer auth_token","title":"Access token"},{"location":"client_setup/#integration-with-carina","text":"Carina automation framework tracks test results in Zafira by default, all you need is a valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify the following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default, zafira_project=UNKNOWN , but using admin user you are able to create multiple projects via Zafira UI (Top menu Project Create). When a new project is created, you may override the zafira_project property and track the results in an appropriate context.","title":"Integration with Carina"},{"location":"client_setup/#integration-with-testng","text":"If you are implementing your own TestNG-based automation project, you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place it in the resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] }","title":"Integration with TestNG"},{"location":"client_setup/#languages-and-frameworks-supported","text":"Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Languages and frameworks supported"},{"location":"dashboards/","text":"Dashboards General is the main page that will be displayed by default when you open Zebrunner. By default, it accumulates 4 widgets - 30 days total, 30 days pass rate by platform, 30 days test details, and 30 days tests trend. Later on, all the other added widgets will also be displayed there: The upper bar of the window holds several icons with the actions that can be performed with a dashboard and its widgets: Sending dashboards by email Widget placement / resizing / rearrangement Dashboard editing Adding new widgets to a dashboard Sending dashboards via email To send the current dashboard via email: Click on the arrow icon in the upper-right corner of the window: The following pop-up will appear: The \u201cName\u201d and \u201cText\u201d fields are filled by default, the text is changeable. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time) and press the \u201cSend\u201d button. A pop-up message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window. Email view of the General Dashboards page: Working with widgets To change the widget placement / resize a widget, click on the \u201cWidgets\u201d icon in the upper-right corner of the window: In this mode, the size of all widgets can be changed (the arrows at every corner of a widget - the same principle as for system windows): All the widgets on a dashboard can be arranged the way you prefer using the drag and drop method. Once all the necessary changes are done, click on the \u201cApply\u201d button in the upper-right corner of the page: If you\u2019ve changed your mind, click on the \u201cCancel\u201d button. The last saved version of the Widgets set and placement will be displayed. Widgets are grouped into dashboards. There are two types of widgets: default and custom ones. You can choose between the 14 types of pre-configured widgets or 11 types of configurable templates. To create a new widget, perform the following steps: Navigate to the \"Dashboards\" page (a.k.a \u201cGeneral\u201d) and click the \"+ NEW WIDGET\" button in the top-right corner of the page: The \u201cChoose widget\u201d pop-up will appear, where you can choose one or several of the following configurable templates: Application issues (blockers) count (A number of unique application bugs discovered and submitted by automation) Application issues (blockers) details (Detailed information about known issues and blockers) Milestone details (Consolidated test status trend with the ability to specify 10+ extra filters and grouping by hours, days, month, etc.) Monthly test implementation progress (A number of new automated cases per month) Pass rate (Consolidated test status information with the ability to specify 10+ extra filters including daily, weekly, monthly, etc. period.) Pass rate (%) - Pass rate percent with an extra grouping by project, owner, etc.) Pass rate trend (Consolidated test status trend with the ability to specify 10+ extra filters and grouping by hours, days, months, etc.) Test cases by stability (Shows all test cases with low stability percent rate per appropriate period (default - less than 10%) Test execution ROI (Man-hours) (Monthly team/personal automation ROI by test executions) Tests failures by reason (Summarized information about test failures grouped by reason) Tests summary (Detailed information about passed, failed, skipped, etc. tests) OR choose from various existing widgets 30 days pass rate by platform (%) (Pass rate by platform (%)) 30 days test details (Detailed information about passed, failed, skipped, etc. tests for the last 30 days) 30 days personal trend (Consolidated personal test status trend for the last 30 days) 30 days tests trend (Consolidated test status trend for the last 30 days) 30 days total (Consolidated test status information for the last 30 days) Last 24 hours personal (Consolidated personal information for the last 24 hours) Last 24 hours personal failures (Summarized personal information about tests failures grouped by reason) Last 30 days personal (Consolidated personal information for the last 30 days) Last 7 days personal (Consolidated personal information for the last 7 days) Monthly test implementation progress (Number of new automated cases per month) Personal total rate (Totally consolidated personal test status information) Personal total tests (man-hours) (Monthly personal automation ROI by tests execution. 160+hours for UI tests indicates that your execution ROI\u2026\u2026.) Total personal tests trend (Totally consolidated personal tests status trend) You can add an unlimited quantity of widgets to a dashboard. To add a widget, click on it, and, when you\u2019ve chosen all the widgets you need, click the \u00abAdd\u00bb button. If you\u2019ve changed your mind and don\u2019t want to add one or several of the already chosen widgets, click on the three dots/additional options/menu icon and choose \u00abDelete\u00bb, all the selected items will be deleted. When you add a widget to a dashboard, it will be marked with a word \u00abAdded\u00bb and a tick: Editing dashboards To edit a dashboard, click on the pencil icon in the upper-right corner of the window: The following pop-up will appear: Fill in the Key and Value fields and click on the \u201cSave\u201d button. Please, note that neither the name of the General dashboard nor \u201cHidden\u201d status cannot be changed - they are set by default. These options are available for custom dashboards. (Permissions here) Creating a new dashboard To create a new dashboard, navigate to the side menu and click on the \u201cDashboards\u201d icon and then on the \u201c+Add dashboard\u201d button: The following pop-up will appear: Create the name for the dashboard, choose whether it will be hidden or seen to other users (incl. admins), and press the \u201cCreate\u201d button. Search panel The search criteria: Name of the dashboard The list of default Dashboards (with widgets): Personal Last 24 hours 7 days/ 30 days personal 30 days tests personal trend Last 24 hours personal + failures Failures Analysis Last 24 hours failure count Last 24 hours personal details User Performance Personal Total Rate Personal Total Tests (Man-hours) Monthly Test Implementation Progress (Number Of Test Methods Implemented By Person) Total Personal Tests Trend Stability Test Case Stability (%) Testcase info Test Case Stability Trend (%) Test Case Duration Details (Sec)","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"General is the main page that will be displayed by default when you open Zebrunner. By default, it accumulates 4 widgets - 30 days total, 30 days pass rate by platform, 30 days test details, and 30 days tests trend. Later on, all the other added widgets will also be displayed there: The upper bar of the window holds several icons with the actions that can be performed with a dashboard and its widgets: Sending dashboards by email Widget placement / resizing / rearrangement Dashboard editing Adding new widgets to a dashboard","title":"Dashboards"},{"location":"dashboards/#sending-dashboards-via-email","text":"","title":"Sending dashboards via email"},{"location":"dashboards/#to-send-the-current-dashboard-via-email","text":"Click on the arrow icon in the upper-right corner of the window: The following pop-up will appear: The \u201cName\u201d and \u201cText\u201d fields are filled by default, the text is changeable. Fill in the \u201cRecipients\u201d field (unlimited number of emails per time) and press the \u201cSend\u201d button. A pop-up message \u201cEmail was successfully sent\u201d will appear in the lower-right corner of the window. Email view of the General Dashboards page:","title":"To send the current dashboard via email:"},{"location":"dashboards/#working-with-widgets","text":"To change the widget placement / resize a widget, click on the \u201cWidgets\u201d icon in the upper-right corner of the window: In this mode, the size of all widgets can be changed (the arrows at every corner of a widget - the same principle as for system windows): All the widgets on a dashboard can be arranged the way you prefer using the drag and drop method. Once all the necessary changes are done, click on the \u201cApply\u201d button in the upper-right corner of the page: If you\u2019ve changed your mind, click on the \u201cCancel\u201d button. The last saved version of the Widgets set and placement will be displayed. Widgets are grouped into dashboards. There are two types of widgets: default and custom ones. You can choose between the 14 types of pre-configured widgets or 11 types of configurable templates.","title":"Working with widgets"},{"location":"dashboards/#to-create-a-new-widget-perform-the-following-steps","text":"Navigate to the \"Dashboards\" page (a.k.a \u201cGeneral\u201d) and click the \"+ NEW WIDGET\" button in the top-right corner of the page: The \u201cChoose widget\u201d pop-up will appear, where you can choose one or several of the following configurable templates: Application issues (blockers) count (A number of unique application bugs discovered and submitted by automation) Application issues (blockers) details (Detailed information about known issues and blockers) Milestone details (Consolidated test status trend with the ability to specify 10+ extra filters and grouping by hours, days, month, etc.) Monthly test implementation progress (A number of new automated cases per month) Pass rate (Consolidated test status information with the ability to specify 10+ extra filters including daily, weekly, monthly, etc. period.) Pass rate (%) - Pass rate percent with an extra grouping by project, owner, etc.) Pass rate trend (Consolidated test status trend with the ability to specify 10+ extra filters and grouping by hours, days, months, etc.) Test cases by stability (Shows all test cases with low stability percent rate per appropriate period (default - less than 10%) Test execution ROI (Man-hours) (Monthly team/personal automation ROI by test executions) Tests failures by reason (Summarized information about test failures grouped by reason) Tests summary (Detailed information about passed, failed, skipped, etc. tests)","title":"To create a new widget, perform the following steps:"},{"location":"dashboards/#or-choose-from-various-existing-widgets","text":"30 days pass rate by platform (%) (Pass rate by platform (%)) 30 days test details (Detailed information about passed, failed, skipped, etc. tests for the last 30 days) 30 days personal trend (Consolidated personal test status trend for the last 30 days) 30 days tests trend (Consolidated test status trend for the last 30 days) 30 days total (Consolidated test status information for the last 30 days) Last 24 hours personal (Consolidated personal information for the last 24 hours) Last 24 hours personal failures (Summarized personal information about tests failures grouped by reason) Last 30 days personal (Consolidated personal information for the last 30 days) Last 7 days personal (Consolidated personal information for the last 7 days) Monthly test implementation progress (Number of new automated cases per month) Personal total rate (Totally consolidated personal test status information) Personal total tests (man-hours) (Monthly personal automation ROI by tests execution. 160+hours for UI tests indicates that your execution ROI\u2026\u2026.) Total personal tests trend (Totally consolidated personal tests status trend) You can add an unlimited quantity of widgets to a dashboard. To add a widget, click on it, and, when you\u2019ve chosen all the widgets you need, click the \u00abAdd\u00bb button. If you\u2019ve changed your mind and don\u2019t want to add one or several of the already chosen widgets, click on the three dots/additional options/menu icon and choose \u00abDelete\u00bb, all the selected items will be deleted. When you add a widget to a dashboard, it will be marked with a word \u00abAdded\u00bb and a tick:","title":"OR choose from various existing widgets"},{"location":"dashboards/#editing-dashboards","text":"To edit a dashboard, click on the pencil icon in the upper-right corner of the window: The following pop-up will appear: Fill in the Key and Value fields and click on the \u201cSave\u201d button. Please, note that neither the name of the General dashboard nor \u201cHidden\u201d status cannot be changed - they are set by default. These options are available for custom dashboards. (Permissions here)","title":"Editing dashboards"},{"location":"dashboards/#creating-a-new-dashboard","text":"To create a new dashboard, navigate to the side menu and click on the \u201cDashboards\u201d icon and then on the \u201c+Add dashboard\u201d button: The following pop-up will appear: Create the name for the dashboard, choose whether it will be hidden or seen to other users (incl. admins), and press the \u201cCreate\u201d button.","title":"Creating a new dashboard"},{"location":"dashboards/#search-panel","text":"The search criteria: Name of the dashboard The list of default Dashboards (with widgets): Personal Last 24 hours 7 days/ 30 days personal 30 days tests personal trend Last 24 hours personal + failures Failures Analysis Last 24 hours failure count Last 24 hours personal details User Performance Personal Total Rate Personal Total Tests (Man-hours) Monthly Test Implementation Progress (Number Of Test Methods Implemented By Person) Total Personal Tests Trend Stability Test Case Stability (%) Testcase info Test Case Stability Trend (%) Test Case Duration Details (Sec)","title":"Search panel"},{"location":"getting_started/","text":"Getting started Prerequisites The easiest way to deploy Zafira is to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in the official documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that the following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK) Startup in Docker Clone Zafira repo: $ git clone https://github.com/qaprosoft/zafira.git If you are planning to access Zafira remotely, you will need to modify docker-compose.yml specifying the appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:80/app Use default credentials to login: qpsdemo/qpsdemo","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#prerequisites","text":"The easiest way to deploy Zafira is to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in the official documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that the following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK)","title":"Prerequisites"},{"location":"getting_started/#startup-in-docker","text":"Clone Zafira repo: $ git clone https://github.com/qaprosoft/zafira.git If you are planning to access Zafira remotely, you will need to modify docker-compose.yml specifying the appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:80/app Use default credentials to login: qpsdemo/qpsdemo","title":"Startup in Docker"},{"location":"integrations/","text":"Integrations Zafira is integrated with multiple third-party tools such as Amazon, Slack, Gmail, etc. You can add new integration to a working Zafira without having to restart the web application. Navigate to the Integrations icon in the sidebar menu: On the Integrations page, you will find several blocks responsible for different integration modules. Please note that the HTTP / HTTPS security model may affect your integration URL. Amazon Zafira uses integration with Amazon S3 service to store user profile photos and company logos. First of all, you need to create a new S3 bucket and generate an access token to provide API access to Amazon S3 from Zafira. Create a new S3 bucket in the region you prefer Navigate to bucket permissions, CORS configuration and set the following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create a new IAM user with Programmatic access Grant read / write permissions for the new user (see [Detailed Guide] (https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket)) Generate new access / secret keys. Enable Amazon integration and provide access / secret keys and the name of the bucket you created. Click Save, a green light indicates the correct integration status. Email Zafira provides functionality for sending test results, widgets, and dashboards via email. You must provide correct SMTP credentials to enable this feature. We mainly use Gmail for these purposes. You can use the configuration below by replacing your email address and password with valid Gmail credentials. User invitations and Forgot password feature also require SMTP integration. Enable email integration. Specify the correct SMTP host and port. Provide valid Gmail credentials. Click Save, a green light indicates the correct integration status. Jenkins Jenkins integration is used for launching new builds and collecting the configurations of test jobs during the startup. Zafira also provides remote debugging and launcher functionality with Jenkins integration enabled. To integrate Jenkins, follow these steps: Create a new user with READ, RUN access for jobs. Create an access token (see [instruction] (https://support.cloudbees.com/hc/en-us/articles/115003090592-How-to-re-generate-my-Jenkins-user-token)). Paste Jenkins URL, username and token to Zafira. Click Save, a green light indicates the correct integration status. Jira Jira integration allows you to track the known issue status for failed test cases. When you assign a known issue to constantly failing test cases, you can specify the appropriate Jira ticket. If integration with Jira is enabled, Zafira will check the current ticket status and track the failure as a known issue (if the ticket is opened), or as unknown (if it is closed). So, you will never lose regression bugs. Paste Jira URL, username and password to Zafira. List a set of statuses that indicate that the ticket is closed. Click Save, a green light indicates the correct integration status. LDAP Zafira supports LDAP authentication: the first time you successfully log in using LDAP, Zafira will register user data in its own database. The admin will be able to manage user permissions for each new user who comes via LDAP. Use the configuration below as a reference for your LDAP connection setup Click Save, a green light indicates the correct integration status SLACK Zafira is able to post automation results into specific Slack channels for better visibility. If integration is set up correctly after a test run is finished, a notification with run details will be sent into the appropriate channel. Such a Slack notification contains basic information on a test run and includes links to this run in Zafira and Jenkins. After a user marks some run as reviewed, and Slack integration is configured for the executed Jenkins job, the user will be proposed to send a notification to Slack about the reviewed run. In order to setup Slack integration, follow the next steps: Generate the Slack web hook URL and add it as a parameter SLACK_WEB_HOOK_URL into the SLACK block at Zafira integrations page. Click Save, a green light indicates the correct integration status. GOOGLE Integration with Google provides the ability to export test run results to spreadsheets. It also allows you to use client-side spreadsheet data using temporary credentials provided by Zafira API (GET: /api/settings/google/creds). To set up integration with Google, follow these steps: Generate a Google service account key (as a file) and attach it by clicking the UPLOAD CLIENT SECRET ORIGIN button in the GOOGLE block on Zafira integrations page. Click Upload , a green light indicates the correct integration status RABBITMQ RabbitMQ integration is used to provide Zafira with the ability to display test logs. Integration is the gateway to transferring logs to Zafira. Follow these steps to configure RabbitMQ integration: Enable RabbitMQ integration. Specify the correct host and port. Provide valid credentials. Click Save, a green light indicates the correct integration status. SELENIUM Zafira uses Selenium integration in the launcher functionality scope. It provides the Selenium server URL used by Jenkins to determine which Selenium instance is preferred for test launch. To configure Selenium integration, follow these steps: Enable Selenium Integration. Enter a valid URL. Provide valid credentials if necessary. Click Save, a green light indicates the correct integration status. TESTRAIL TestRail integration is used to build links leading to TestRail test cases from Zafira test tags. The provided tag key must be TESTRAIL_TESTCASE_UUID as a key, and the internal TestRail test case identifier as a value (for example, 34-66-45465, where 34 - TestRail project ID, 66 - TestRail test suite, 45465 - TestRail test case ID). To configure TestRail integration, follow these steps: Add the TestRail service URL as the parameter URL to the TESTRAIL block on Zafira integrations page. Click Save, a green light indicates the correct integration status. QTEST Zafira supports integration with qTest to build links leading to qTest test cases from Zafira test tags. The provided tag key must be QTEST_TESTCASE_UUID, the value is the internal qTest test case identifier (for example, 454-2423, where 454 - qTest project ID, 2423 - qTest test case ID). To configure qTest integration, follow these steps: Add the qTest service URL as the parameter URL to the QTEST block on Zafira integrations page. Click Save, a green light indicates the correct integration status.","title":"Integrations"},{"location":"integrations/#integrations","text":"Zafira is integrated with multiple third-party tools such as Amazon, Slack, Gmail, etc. You can add new integration to a working Zafira without having to restart the web application. Navigate to the Integrations icon in the sidebar menu: On the Integrations page, you will find several blocks responsible for different integration modules. Please note that the HTTP / HTTPS security model may affect your integration URL.","title":"Integrations"},{"location":"integrations/#amazon","text":"Zafira uses integration with Amazon S3 service to store user profile photos and company logos. First of all, you need to create a new S3 bucket and generate an access token to provide API access to Amazon S3 from Zafira. Create a new S3 bucket in the region you prefer Navigate to bucket permissions, CORS configuration and set the following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create a new IAM user with Programmatic access Grant read / write permissions for the new user (see [Detailed Guide] (https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket)) Generate new access / secret keys. Enable Amazon integration and provide access / secret keys and the name of the bucket you created. Click Save, a green light indicates the correct integration status.","title":"Amazon"},{"location":"integrations/#email","text":"Zafira provides functionality for sending test results, widgets, and dashboards via email. You must provide correct SMTP credentials to enable this feature. We mainly use Gmail for these purposes. You can use the configuration below by replacing your email address and password with valid Gmail credentials. User invitations and Forgot password feature also require SMTP integration. Enable email integration. Specify the correct SMTP host and port. Provide valid Gmail credentials. Click Save, a green light indicates the correct integration status.","title":"Email"},{"location":"integrations/#jenkins","text":"Jenkins integration is used for launching new builds and collecting the configurations of test jobs during the startup. Zafira also provides remote debugging and launcher functionality with Jenkins integration enabled. To integrate Jenkins, follow these steps: Create a new user with READ, RUN access for jobs. Create an access token (see [instruction] (https://support.cloudbees.com/hc/en-us/articles/115003090592-How-to-re-generate-my-Jenkins-user-token)). Paste Jenkins URL, username and token to Zafira. Click Save, a green light indicates the correct integration status.","title":"Jenkins"},{"location":"integrations/#jira","text":"Jira integration allows you to track the known issue status for failed test cases. When you assign a known issue to constantly failing test cases, you can specify the appropriate Jira ticket. If integration with Jira is enabled, Zafira will check the current ticket status and track the failure as a known issue (if the ticket is opened), or as unknown (if it is closed). So, you will never lose regression bugs. Paste Jira URL, username and password to Zafira. List a set of statuses that indicate that the ticket is closed. Click Save, a green light indicates the correct integration status.","title":"Jira"},{"location":"integrations/#ldap","text":"Zafira supports LDAP authentication: the first time you successfully log in using LDAP, Zafira will register user data in its own database. The admin will be able to manage user permissions for each new user who comes via LDAP. Use the configuration below as a reference for your LDAP connection setup Click Save, a green light indicates the correct integration status","title":"LDAP"},{"location":"integrations/#slack","text":"Zafira is able to post automation results into specific Slack channels for better visibility. If integration is set up correctly after a test run is finished, a notification with run details will be sent into the appropriate channel. Such a Slack notification contains basic information on a test run and includes links to this run in Zafira and Jenkins. After a user marks some run as reviewed, and Slack integration is configured for the executed Jenkins job, the user will be proposed to send a notification to Slack about the reviewed run. In order to setup Slack integration, follow the next steps: Generate the Slack web hook URL and add it as a parameter SLACK_WEB_HOOK_URL into the SLACK block at Zafira integrations page. Click Save, a green light indicates the correct integration status.","title":"SLACK"},{"location":"integrations/#google","text":"Integration with Google provides the ability to export test run results to spreadsheets. It also allows you to use client-side spreadsheet data using temporary credentials provided by Zafira API (GET: /api/settings/google/creds). To set up integration with Google, follow these steps: Generate a Google service account key (as a file) and attach it by clicking the UPLOAD CLIENT SECRET ORIGIN button in the GOOGLE block on Zafira integrations page. Click Upload , a green light indicates the correct integration status","title":"GOOGLE"},{"location":"integrations/#rabbitmq","text":"RabbitMQ integration is used to provide Zafira with the ability to display test logs. Integration is the gateway to transferring logs to Zafira. Follow these steps to configure RabbitMQ integration: Enable RabbitMQ integration. Specify the correct host and port. Provide valid credentials. Click Save, a green light indicates the correct integration status.","title":"RABBITMQ"},{"location":"integrations/#selenium","text":"Zafira uses Selenium integration in the launcher functionality scope. It provides the Selenium server URL used by Jenkins to determine which Selenium instance is preferred for test launch. To configure Selenium integration, follow these steps: Enable Selenium Integration. Enter a valid URL. Provide valid credentials if necessary. Click Save, a green light indicates the correct integration status.","title":"SELENIUM"},{"location":"integrations/#testrail","text":"TestRail integration is used to build links leading to TestRail test cases from Zafira test tags. The provided tag key must be TESTRAIL_TESTCASE_UUID as a key, and the internal TestRail test case identifier as a value (for example, 34-66-45465, where 34 - TestRail project ID, 66 - TestRail test suite, 45465 - TestRail test case ID). To configure TestRail integration, follow these steps: Add the TestRail service URL as the parameter URL to the TESTRAIL block on Zafira integrations page. Click Save, a green light indicates the correct integration status.","title":"TESTRAIL"},{"location":"integrations/#qtest","text":"Zafira supports integration with qTest to build links leading to qTest test cases from Zafira test tags. The provided tag key must be QTEST_TESTCASE_UUID, the value is the internal qTest test case identifier (for example, 454-2423, where 454 - qTest project ID, 2423 - qTest test case ID). To configure qTest integration, follow these steps: Add the qTest service URL as the parameter URL to the QTEST block on Zafira integrations page. Click Save, a green light indicates the correct integration status.","title":"QTEST"},{"location":"lifecycle/","text":"Lifecycle The schema below illustrates a general test run flow that should be followed to implement new listeners: Step 1: Refresh a token POST: /zafira-ws/api/auth/refresh Request { refreshToken : eyJhbGciOiJIUzUxMiJ9... } Field Datatype Description refreshToken String Token obtained by generation Response { type : Bearer , accessToken : eyJhbGciOiJIUzUMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi... , expiresIn : 300, tenant : zafira } Field Datatype Description type String Type of authorization accessToken String Refreshed token we need for headers expiresIn int Expiration time of a new token refreshToken String Token tenant String Tenant name Step 2: Get a user profile GET: /zafira-ws/api/users/profile?username={username} Headers: Authorization=Bearer {accessToken} Request None Response { id :2, username : admin , password : zRNkEjrbdBB70DVZA1leMqdJy+9uJCpK , roles :[ ROLE_ADMIN ], permissions :[{ id :1, modifiedAt :null, createdAt :null, name : VIEW_HIDDEN_DASHBOARDS , block :null }], preferences :[{ id :6, modifiedAt :1544195439376, createdAt :1544195439376, name : THEME , value : 32 }], lastLogin :1544617640554, source : INTERNAL , status : ACTIVE } Field Datatype Description id int Unique user identifier username String Credentials password String Credentials roles String array User roles (\"ROLE_ADMIN\", \"ROLE_ADMIN\", \"ROLE_SUPERADMIN\") permissions Object List List of user permissions preferences Object List List of user preferences lastLogin Date Date of a user's last login source Object \"INTERNAL\", \"LDAP\" status Object Logged in or not (\"ACTIVE\",\"INACTIVE\") Step 3: Create a test suite POST: /zafira-ws/api/tests/suites Headers: Authorization=Bearer {accessToken} Request { fileName : ExampleFileName , name : ExampleSuiteName , userId : 2 } Field Datatype Description userId int Unique user identifier fileName String Name of XML suite name String Suite name Response { id : 8, name : ExampleSuiteName , fileName : ExampleFileName , userId : 2 } Field Datatype Description id int Unique test suite identifier name String Suite name fileName String Name of XML suite userId int Unique user identifier Step 4: Create a job POST: /zafira-ws/api/jobs Headers: Authorization=Bearer {accessToken} Request { jenkinsHost : ExampleJenkinsHost , jobURL : ExampleJobURL , name : ExampleJobName , userId : 2 } Field Datatype Description jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique test suite identifier Response { id : 8, name : ExampleJobName , jobURL : ExampleJobURL , jenkinsHost : ExampleJenkinsHost , userId : 2 } Field Datatype Description id int Unique job identifier jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique user identifier Step 5: Create a test run POST: /zafira-ws/api/tests/runs Headers: Authorization=Bearer {accessToken} Request { buildNumber : 0, jobId : 8, startedBy : HUMAN , testSuiteId : 8 } Field Datatype Description jobId int Unique job identifier testSuiteId int Unique test suite identifier buildNumber int Build number startedBy String One of the values: \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : IN_PROGRESS , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : false, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id jobId int Job id testSuiteId int Unique test suite identifier buildNumber int Build number blocker bool Unexpected behavior that keeps you from performing all test case steps knownIssue bool Failing reason in a ticket reviewed bool Shows whether a test has been reviewed status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Step 6: Create a test case POST: /zafira-ws/api/tests/cases Headers: Authorization=Bearer {accessToken} Request { primaryOwnerId : 2, testClass : ExampleTestClassName , testMethod : ExampleTestName , testSuiteId : 8 } Field Datatype Description primaryOwnerId int Unique identifier of a test case creator testClass String Name of the test class testMethod String Name of the test method testSuiteId int Unique test suite identifier Response { id : 23, testClass : ExampleTestClassName , testMethod : ExampleTestMethod , testSuiteId : 8, primaryOwnerId : 2 } Field Datatype Description id int Unique identifier of a test case primaryOwnerId int Unique identifier of a test case creator testClass String Name of the test class testMethod String Name of the test method testSuiteId int Unique test suite identifier Step 7: Start a test POST: /zafira-ws/api/tests Headers: Authorization=Bearer {accessToken} Request { name : ExampleTestName , status : IN_PROGRESS , testCaseId : 23, testRunId : 62 } Field Datatype Description testRunId int Unique test run identifier testCaseId int Unique identifier of a test case name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Response { id : 222, name : ExampleTestName , status : IN_PROGRESS , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : false, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc) Step 8: Finish a test POST: /zafira-ws/api/tests/{testId}/finish Headers: Authorization=Bearer {accessToken} Request { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc) Response { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc) Step 9: Finish a test run POST: /zafira-ws/api/tests/runs/{testRunId}/finish Headers: Authorization=Bearer {accessToken} Request None Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : FAILED , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : true, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id testSuiteId int Unique test suite identifier status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") jobId int Job id buildNumber int Build number startedBy String One of the values: \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps reviewed bool Shows whether a test has been reviewed","title":"Lifecycle"},{"location":"lifecycle/#lifecycle","text":"The schema below illustrates a general test run flow that should be followed to implement new listeners:","title":"Lifecycle"},{"location":"lifecycle/#step-1-refresh-a-token","text":"POST: /zafira-ws/api/auth/refresh Request { refreshToken : eyJhbGciOiJIUzUxMiJ9... } Field Datatype Description refreshToken String Token obtained by generation Response { type : Bearer , accessToken : eyJhbGciOiJIUzUMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi... , expiresIn : 300, tenant : zafira } Field Datatype Description type String Type of authorization accessToken String Refreshed token we need for headers expiresIn int Expiration time of a new token refreshToken String Token tenant String Tenant name","title":"Step 1: Refresh a token"},{"location":"lifecycle/#step-2-get-a-user-profile","text":"GET: /zafira-ws/api/users/profile?username={username} Headers: Authorization=Bearer {accessToken} Request None Response { id :2, username : admin , password : zRNkEjrbdBB70DVZA1leMqdJy+9uJCpK , roles :[ ROLE_ADMIN ], permissions :[{ id :1, modifiedAt :null, createdAt :null, name : VIEW_HIDDEN_DASHBOARDS , block :null }], preferences :[{ id :6, modifiedAt :1544195439376, createdAt :1544195439376, name : THEME , value : 32 }], lastLogin :1544617640554, source : INTERNAL , status : ACTIVE } Field Datatype Description id int Unique user identifier username String Credentials password String Credentials roles String array User roles (\"ROLE_ADMIN\", \"ROLE_ADMIN\", \"ROLE_SUPERADMIN\") permissions Object List List of user permissions preferences Object List List of user preferences lastLogin Date Date of a user's last login source Object \"INTERNAL\", \"LDAP\" status Object Logged in or not (\"ACTIVE\",\"INACTIVE\")","title":"Step 2: Get a user profile"},{"location":"lifecycle/#step-3-create-a-test-suite","text":"POST: /zafira-ws/api/tests/suites Headers: Authorization=Bearer {accessToken} Request { fileName : ExampleFileName , name : ExampleSuiteName , userId : 2 } Field Datatype Description userId int Unique user identifier fileName String Name of XML suite name String Suite name Response { id : 8, name : ExampleSuiteName , fileName : ExampleFileName , userId : 2 } Field Datatype Description id int Unique test suite identifier name String Suite name fileName String Name of XML suite userId int Unique user identifier","title":"Step 3: Create a test suite"},{"location":"lifecycle/#step-4-create-a-job","text":"POST: /zafira-ws/api/jobs Headers: Authorization=Bearer {accessToken} Request { jenkinsHost : ExampleJenkinsHost , jobURL : ExampleJobURL , name : ExampleJobName , userId : 2 } Field Datatype Description jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique test suite identifier Response { id : 8, name : ExampleJobName , jobURL : ExampleJobURL , jenkinsHost : ExampleJenkinsHost , userId : 2 } Field Datatype Description id int Unique job identifier jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique user identifier","title":"Step 4: Create a job"},{"location":"lifecycle/#step-5-create-a-test-run","text":"POST: /zafira-ws/api/tests/runs Headers: Authorization=Bearer {accessToken} Request { buildNumber : 0, jobId : 8, startedBy : HUMAN , testSuiteId : 8 } Field Datatype Description jobId int Unique job identifier testSuiteId int Unique test suite identifier buildNumber int Build number startedBy String One of the values: \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : IN_PROGRESS , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : false, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id jobId int Job id testSuiteId int Unique test suite identifier buildNumber int Build number blocker bool Unexpected behavior that keeps you from performing all test case steps knownIssue bool Failing reason in a ticket reviewed bool Shows whether a test has been reviewed status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\")","title":"Step 5: Create a test run"},{"location":"lifecycle/#step-6-create-a-test-case","text":"POST: /zafira-ws/api/tests/cases Headers: Authorization=Bearer {accessToken} Request { primaryOwnerId : 2, testClass : ExampleTestClassName , testMethod : ExampleTestName , testSuiteId : 8 } Field Datatype Description primaryOwnerId int Unique identifier of a test case creator testClass String Name of the test class testMethod String Name of the test method testSuiteId int Unique test suite identifier Response { id : 23, testClass : ExampleTestClassName , testMethod : ExampleTestMethod , testSuiteId : 8, primaryOwnerId : 2 } Field Datatype Description id int Unique identifier of a test case primaryOwnerId int Unique identifier of a test case creator testClass String Name of the test class testMethod String Name of the test method testSuiteId int Unique test suite identifier","title":"Step 6: Create a test case"},{"location":"lifecycle/#step-7-start-a-test","text":"POST: /zafira-ws/api/tests Headers: Authorization=Bearer {accessToken} Request { name : ExampleTestName , status : IN_PROGRESS , testCaseId : 23, testRunId : 62 } Field Datatype Description testRunId int Unique test run identifier testCaseId int Unique identifier of a test case name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Response { id : 222, name : ExampleTestName , status : IN_PROGRESS , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : false, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc)","title":"Step 7: Start a test"},{"location":"lifecycle/#step-8-finish-a-test","text":"POST: /zafira-ws/api/tests/{testId}/finish Headers: Authorization=Bearer {accessToken} Request { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc) Response { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of a test case retry int Shows the count a test ran knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a rerun is needed artifacts Object array List of test artifacts (logs, screenshots etc)","title":"Step 8: Finish a test"},{"location":"lifecycle/#step-9-finish-a-test-run","text":"POST: /zafira-ws/api/tests/runs/{testRunId}/finish Headers: Authorization=Bearer {accessToken} Request None Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : FAILED , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : true, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id testSuiteId int Unique test suite identifier status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") jobId int Job id buildNumber int Build number startedBy String One of the values: \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" knownIssue bool Failing reason in a ticket blocker bool Unexpected behavior that keeps you from performing all test case steps reviewed bool Shows whether a test has been reviewed","title":"Step 9: Finish a test run"},{"location":"profile/","text":"Profile Click the profile icon in the lower-left corner of the page to open your User profile . If you want to change the profile photo, navigate to the same icon on your profile page to upload it. The Personal data area displays a user's personal information. Both Username and Email are set when creating a profile and cannot be changed. First Name and Last Name are editable. In the Access token area, integration data can be obtained. Copy Service URL and Access token (previously generated) to get integrated with Zafira. In the Change password menu, there are fields for updating the current password. A new password must contain at least 5 characters which can be letters, numbers, special characters.","title":"Profile"},{"location":"profile/#profile","text":"Click the profile icon in the lower-left corner of the page to open your User profile . If you want to change the profile photo, navigate to the same icon on your profile page to upload it. The Personal data area displays a user's personal information. Both Username and Email are set when creating a profile and cannot be changed. First Name and Last Name are editable. In the Access token area, integration data can be obtained. Copy Service URL and Access token (previously generated) to get integrated with Zafira. In the Change password menu, there are fields for updating the current password. A new password must contain at least 5 characters which can be letters, numbers, special characters.","title":"Profile"},{"location":"releases/","text":"Release notes 3.3.37 (2018-11-15) Enhancements Migrated to new Echarts library Improved widget management on the dashboard page Migrated to html2canvas for dashboards screenshoting Removed SeleniumSerice and dependency on selenium container Fixes Fix all security vulnerabilities provided by Github Minor UI fixed on test runs page: #1175, #1187, #1189, #1173 [DEPENDENCIES UPDATES] spring 4.3.20.RELEASE spring-security.version 4.2.9.RELEASE jackson. 2.9.7 tomcat 7.0.91 amqp-client.version 4.9.0 3.3.36 (2018-11-01) Enhancements Implemented test grouping functionality based on test package or class Implemented test filtering based on the actual test result Improved the way of navigation to test details, now are staying in the same window having the ability to go back saving test results revision context Implemented AWS Cloud Front integration for more secured way of publishing artifacts and providing access for them Fixes Now test artifacts do not contain unused links like Video and VNC Cleared obsolete links from Zafira emailable reports Fixed problem with short-term links generation for S3 artifacts [DEPENDENCIES UPDATES] N/A","title":"Release notes"},{"location":"releases/#release-notes","text":"","title":"Release notes"},{"location":"releases/#3337-2018-11-15","text":"","title":"3.3.37 (2018-11-15)"},{"location":"releases/#enhancements","text":"Migrated to new Echarts library Improved widget management on the dashboard page Migrated to html2canvas for dashboards screenshoting Removed SeleniumSerice and dependency on selenium container","title":"Enhancements"},{"location":"releases/#fixes","text":"Fix all security vulnerabilities provided by Github Minor UI fixed on test runs page: #1175, #1187, #1189, #1173","title":"Fixes"},{"location":"releases/#dependencies-updates","text":"spring 4.3.20.RELEASE spring-security.version 4.2.9.RELEASE jackson. 2.9.7 tomcat 7.0.91 amqp-client.version 4.9.0","title":"[DEPENDENCIES UPDATES]"},{"location":"releases/#3336-2018-11-01","text":"","title":"3.3.36 (2018-11-01)"},{"location":"releases/#enhancements_1","text":"Implemented test grouping functionality based on test package or class Implemented test filtering based on the actual test result Improved the way of navigation to test details, now are staying in the same window having the ability to go back saving test results revision context Implemented AWS Cloud Front integration for more secured way of publishing artifacts and providing access for them","title":"Enhancements"},{"location":"releases/#fixes_1","text":"Now test artifacts do not contain unused links like Video and VNC Cleared obsolete links from Zafira emailable reports Fixed problem with short-term links generation for S3 artifacts","title":"Fixes"},{"location":"releases/#dependencies-updates_1","text":"N/A","title":"[DEPENDENCIES UPDATES]"},{"location":"test_runs/","text":"Test runs","title":"Test runs"},{"location":"test_runs/#test-runs","text":"","title":"Test runs"},{"location":"user_management/","text":"User management","title":"User management"},{"location":"user_management/#user-management","text":"","title":"User management"}]}