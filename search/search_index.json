{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Zafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support. Primary features Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to compose automation reports and send via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Overview"},{"location":"#introduction","text":"Zafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support.","title":"Introduction"},{"location":"#primary-features","text":"Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to compose automation reports and send via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Primary features"},{"location":"client_setup/","text":"Client setup Access token Zafira provides REST API to track test automation results (use Swagger to learn API). You have diffent options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to Username Profile in top navigation menu: Scroll down and generate new access token: Zafira uses stateless authenticatication using JWT technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All HTTP calls that requires authorization context should contain header: Authorizarion: Bearer auth_token Integration with Carina Carina automation framework tacks test results in Zafira by default, all you need is valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default zafira_project=UNKNOWN but using admin user you are capable to create multiple projects via Zafira UI (Top menu Project Create). When new project created you may override zafira_project property and track resutls in appropriate context. Integration with TestNG If you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place in resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] } Languages and frameworks supported Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Client setup"},{"location":"client_setup/#client-setup","text":"","title":"Client setup"},{"location":"client_setup/#access-token","text":"Zafira provides REST API to track test automation results (use Swagger to learn API). You have diffent options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to Username Profile in top navigation menu: Scroll down and generate new access token: Zafira uses stateless authenticatication using JWT technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All HTTP calls that requires authorization context should contain header: Authorizarion: Bearer auth_token","title":"Access token"},{"location":"client_setup/#integration-with-carina","text":"Carina automation framework tacks test results in Zafira by default, all you need is valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default zafira_project=UNKNOWN but using admin user you are capable to create multiple projects via Zafira UI (Top menu Project Create). When new project created you may override zafira_project property and track resutls in appropriate context.","title":"Integration with Carina"},{"location":"client_setup/#integration-with-testng","text":"If you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place in resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] }","title":"Integration with TestNG"},{"location":"client_setup/#languages-and-frameworks-supported","text":"Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Languages and frameworks supported"},{"location":"dashboards/","text":"Dashboards","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"","title":"Dashboards"},{"location":"getting_started/","text":"Getting started Prerequesties The easiest way to deploy Zafira it to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK) Startup in Docker Clone Zafira repo: $ git clone git@github.com:qaprosoft/zafira.git If you are planning to access Zafira remotely you will need to modify docker-compose.yml specifying appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:8080/zafira Use default credentials to login: qpsdemo/qpsdemo","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#prerequesties","text":"The easiest way to deploy Zafira it to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK)","title":"Prerequesties"},{"location":"getting_started/#startup-in-docker","text":"Clone Zafira repo: $ git clone git@github.com:qaprosoft/zafira.git If you are planning to access Zafira remotely you will need to modify docker-compose.yml specifying appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:8080/zafira Use default credentials to login: qpsdemo/qpsdemo","title":"Startup in Docker"},{"location":"integrations/","text":"Integration Zafira is integrated with multiple 3rd-party tools like Amazon, Slack, Gmail etc. You are able to add new integration in working Zafira without restart of web application. Navigate to Username Integrations in top navigation menu: On the integrations page you will find multiple blocks responsible for different integration modules. Pay attention to the fact that security model HTTP/HTTPS may affect your integration URL. Amazon Zafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira. Create new S3 bucket in region you prefer Navigate to bucket permissions, CORS configuration and set following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create new IAM user with Programmatic access Grant read/write permissions for new user (read detailed guide ) Generate new access/secret keys Turn on Amazon integration and provide access/secret keys and name of the bucket you've created Press save and refresh the page, green light indicates correct integration status Email Zafira provides functionality for sending test results, widgets and dashboards via email. You have to specify correct SMTP credentials to enable this feature. We are mostly using Gmail for that purposes. You can use configuration below replacing email and password with your valid Gmail credentials. Turn on Email integration Specify correct SMTP host and port Specify valid Gmail credentials Press save and refresh the page, green light indicates correct integration status Jenkins Jenkins integration is used for triggering new builds and collecting test jobs configuration during the startup. Also Zafira provides remote debug with Jenkins integration enabled. For Jenkins integration follow the next steps: Create user with READ,RUN access for jobs Generate access token (read instruction ) Paste Jenkins URL, username and token to Zafira Press save and refresh the page, green light indicates correct integration status Jira Jira integration allows to track known issues status for failed test cases. When you assign known issue to contstantly failing test cases you may specify appropriate Jira ticket. In Jira integrationg is inabled, Zafira will check current ticket status and track failure as known issus if ticket opened and as unknown if it is closed, so you will never loose regression bugs. Paste Jira URL, username and password to Zafira List set of statuses that indicates that ticket is closed Press save and refresh the page, green light indicates correct integration status LDAP Zafira supports LDAP authentication, in this case on first success login via LDAP Zafira will register user details in own database. Admin will be able to manage user permissions for every new user came via LDAP. Use configuration below as a reference for your LDAP connection setup Press save and refresh the page, green light indicates correct integration status SLACK Zafira is capable to post automation results into specific Slack channels for better visibility. If integration is set up right after test run is finished notification with run details will be sent into appropriate channel. Such Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins. After user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run. In order to setup Slack integration follow the next steps: Generate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page For each Jenkins job you need integration for add parameters in Zafira using next pattern: SLACK_NOTIF_CHANNEL_real_channel_name=JENKINS_JOB_1;JENKINS_JOB_2 where real_channel_name - name of Slack channel to post notifications to JENKINS_JOB_1 and JENKINS_JOB_2 - names of Jenkins jobs You may add as many integration as you need. For each new Slack channel create new parameter in SLACK section in Zafira Press save and refresh the page, green light indicates correct integration status","title":"Integrations"},{"location":"integrations/#integration","text":"Zafira is integrated with multiple 3rd-party tools like Amazon, Slack, Gmail etc. You are able to add new integration in working Zafira without restart of web application. Navigate to Username Integrations in top navigation menu: On the integrations page you will find multiple blocks responsible for different integration modules. Pay attention to the fact that security model HTTP/HTTPS may affect your integration URL.","title":"Integration"},{"location":"integrations/#amazon","text":"Zafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira. Create new S3 bucket in region you prefer Navigate to bucket permissions, CORS configuration and set following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create new IAM user with Programmatic access Grant read/write permissions for new user (read detailed guide ) Generate new access/secret keys Turn on Amazon integration and provide access/secret keys and name of the bucket you've created Press save and refresh the page, green light indicates correct integration status","title":"Amazon"},{"location":"integrations/#email","text":"Zafira provides functionality for sending test results, widgets and dashboards via email. You have to specify correct SMTP credentials to enable this feature. We are mostly using Gmail for that purposes. You can use configuration below replacing email and password with your valid Gmail credentials. Turn on Email integration Specify correct SMTP host and port Specify valid Gmail credentials Press save and refresh the page, green light indicates correct integration status","title":"Email"},{"location":"integrations/#jenkins","text":"Jenkins integration is used for triggering new builds and collecting test jobs configuration during the startup. Also Zafira provides remote debug with Jenkins integration enabled. For Jenkins integration follow the next steps: Create user with READ,RUN access for jobs Generate access token (read instruction ) Paste Jenkins URL, username and token to Zafira Press save and refresh the page, green light indicates correct integration status","title":"Jenkins"},{"location":"integrations/#jira","text":"Jira integration allows to track known issues status for failed test cases. When you assign known issue to contstantly failing test cases you may specify appropriate Jira ticket. In Jira integrationg is inabled, Zafira will check current ticket status and track failure as known issus if ticket opened and as unknown if it is closed, so you will never loose regression bugs. Paste Jira URL, username and password to Zafira List set of statuses that indicates that ticket is closed Press save and refresh the page, green light indicates correct integration status","title":"Jira"},{"location":"integrations/#ldap","text":"Zafira supports LDAP authentication, in this case on first success login via LDAP Zafira will register user details in own database. Admin will be able to manage user permissions for every new user came via LDAP. Use configuration below as a reference for your LDAP connection setup Press save and refresh the page, green light indicates correct integration status","title":"LDAP"},{"location":"integrations/#slack","text":"Zafira is capable to post automation results into specific Slack channels for better visibility. If integration is set up right after test run is finished notification with run details will be sent into appropriate channel. Such Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins. After user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run. In order to setup Slack integration follow the next steps: Generate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page For each Jenkins job you need integration for add parameters in Zafira using next pattern: SLACK_NOTIF_CHANNEL_real_channel_name=JENKINS_JOB_1;JENKINS_JOB_2 where real_channel_name - name of Slack channel to post notifications to JENKINS_JOB_1 and JENKINS_JOB_2 - names of Jenkins jobs You may add as many integration as you need. For each new Slack channel create new parameter in SLACK section in Zafira Press save and refresh the page, green light indicates correct integration status","title":"SLACK"},{"location":"profile/","text":"Profile Navigate to Username My profile in top navigation menu to customize your Zafira user preferences. On hover on round area near your first name 'settings' icon appears, click it and change existing picture of your profile or upload a new one. In User profile area personal user information such as first name, last name and email address can be changed. Edit values in the corresponding fields and click Save button. In Preferences area Zafira system settings are available: Color schema Default dashboard Widget refresh interval Color schema provides choice between Light and Black options. Default dashboard will be the page opened after Zafira login. General dashboard by default. Widget refresh interval is applied when Refreshable option is picked for widget and lets widget to refresh its data according to the chosen time interval (30 sec, 1 min, 2 min, 5 min). Disabled by default. In Change password area user can update current password. Password must contain not less than 6 characters. In Access token area token required for Zafira integration can be generated and copied .","title":"Profile"},{"location":"profile/#profile","text":"Navigate to Username My profile in top navigation menu to customize your Zafira user preferences. On hover on round area near your first name 'settings' icon appears, click it and change existing picture of your profile or upload a new one. In User profile area personal user information such as first name, last name and email address can be changed. Edit values in the corresponding fields and click Save button. In Preferences area Zafira system settings are available: Color schema Default dashboard Widget refresh interval Color schema provides choice between Light and Black options. Default dashboard will be the page opened after Zafira login. General dashboard by default. Widget refresh interval is applied when Refreshable option is picked for widget and lets widget to refresh its data according to the chosen time interval (30 sec, 1 min, 2 min, 5 min). Disabled by default. In Change password area user can update current password. Password must contain not less than 6 characters. In Access token area token required for Zafira integration can be generated and copied .","title":"Profile"},{"location":"releases/","text":"Release notes","title":"Release notes"},{"location":"releases/#release-notes","text":"","title":"Release notes"},{"location":"test_runs/","text":"Test runs","title":"Test runs"},{"location":"test_runs/#test-runs","text":"","title":"Test runs"},{"location":"user_management/","text":"User management","title":"User management"},{"location":"user_management/#user-management","text":"","title":"User management"}]}