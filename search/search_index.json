{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Zafira is a central automation reporting system that is built on the top of Java Spring Framework. It dramatically increases the transparency of test automation results and provides better understanding of product quality. Qaprosoft team is developing Zafira based on more than 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework but you are capable to integrate Zafira client into your own automation tool. We are actively developing clients for different languages and frameworks but still looking for active community to provide better support. Primary features Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to compose automation reports and send via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Overview"},{"location":"#introduction","text":"Zafira is a central automation reporting system that is built on the top of Java Spring Framework. It dramatically increases the transparency of test automation results and provides better understanding of product quality. Qaprosoft team is developing Zafira based on more than 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it! Zafira was initially designed to track automation progress of the tests written using Carina automation framework but you are capable to integrate Zafira client into your own automation tool. We are actively developing clients for different languages and frameworks but still looking for active community to provide better support.","title":"Introduction"},{"location":"#primary-features","text":"Real-time test results tracking via websockets VNC streaming and video recording of test sessions Flexibly configured widgets and dashboards based on D3JS User management with authorization policies Integration with TestRail and JIRA Integration with Hipchat and Slack Ability to compose automation reports and send via email Configurable dashboards Integrations with multiple services Real-time test results Live streaming and video recording Comparison of test runs Test issues tracking","title":"Primary features"},{"location":"client_setup/","text":"Client setup Access token Zafira provides REST API to track test automation results (use Swagger to learn API). You have different options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to Username Profile in top navigation menu: Scroll down and generate new access token: Zafira uses stateless authentication using JWT technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All HTTP calls that requires authorization context should contain header: Authorizarion: Bearer auth_token Integration with Carina Carina automation framework tacks test results in Zafira by default, all you need is valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default zafira_project=UNKNOWN but using admin user you are capable to create multiple projects via Zafira UI (Top menu Project Create). When new project is created you may override zafira_project property and track results in appropriate context. Integration with TestNG If you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place in resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] } Languages and frameworks supported Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Client setup"},{"location":"client_setup/#client-setup","text":"","title":"Client setup"},{"location":"client_setup/#access-token","text":"Zafira provides REST API to track test automation results (use Swagger to learn API). You have different options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to Username Profile in top navigation menu: Scroll down and generate new access token: Zafira uses stateless authentication using JWT technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. POST /api/auth/refresh { refreshToken : access_token } Response: { type : Bearer , accessToken : eyJhbGciOiJIUzUxMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi9... , expiresIn : 300 } All HTTP calls that requires authorization context should contain header: Authorizarion: Bearer auth_token","title":"Access token"},{"location":"client_setup/#integration-with-carina","text":"Carina automation framework tacks test results in Zafira by default, all you need is valid access token in zafira.properties file. zafira_enabled=true zafira_service_url=http://localhost:8080/zafira-ws zafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI... zafira_project=UNKNOWN zafira_rerun_failures=false zafira_report_emails= zafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator Verify following properties: zafira_enabled=true zafira_service_url=YOUR_ZAFIRA_URL By default zafira_project=UNKNOWN but using admin user you are capable to create multiple projects via Zafira UI (Top menu Project Create). When new project is created you may override zafira_project property and track results in appropriate context.","title":"Integration with Carina"},{"location":"client_setup/#integration-with-testng","text":"If you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using TestNG listener . Add Zafira client as Maven dependency: dependency groupId com.qaprosoft /groupId artifactId zafira-client /artifactId version latest /version /dependency Create zafira.properties and place in resource folder, update configuration Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener: suite [...] listeners listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / /listeners [...] /suite or @Listeners({ZafiraListener.class}) public class LoginTest { [...] }","title":"Integration with TestNG"},{"location":"client_setup/#languages-and-frameworks-supported","text":"Java - TestNG guide Ruby - Cucumber Ruby - RSpec C# - NUnit","title":"Languages and frameworks supported"},{"location":"dashboards/","text":"Dashboards","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"","title":"Dashboards"},{"location":"getting_started/","text":"Getting started Prerequesties The easiest way to deploy Zafira is to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in official documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK) Startup in Docker Clone Zafira repo: $ git clone https://github.com/qaprosoft/zafira.git If you are planning to access Zafira remotely you will need to modify docker-compose.yml specifying appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:80/app Use default credentials to login: qpsdemo/qpsdemo","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#prerequesties","text":"The easiest way to deploy Zafira is to use Docker . You will find all the details for installation of Docker Engine and Docker Compose in official documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations. Before running Zafira, verify that following ports are not binded: 8080 (Tomcat) 5433 (PostgresDB) 15672 (RabbitMQ) 15674 (RabbitMQ) 5672 (RabbitMQ) 5601 (ELK) 9200 (ELK) 5044 (ELK)","title":"Prerequesties"},{"location":"getting_started/#startup-in-docker","text":"Clone Zafira repo: $ git clone https://github.com/qaprosoft/zafira.git If you are planning to access Zafira remotely you will need to modify docker-compose.yml specifying appropriate IP address of your host: environment: - ZAFIRA_URL=http://localhost:8080 Start Zafira: $ docker-compose up -d Verify deployment by running: $ docker ps CONTAINER ID IMAGE COMMAND c0e8e371de0f qaprosoft/zafira:latest /bin/sh -c /entrypo\u2026 a207d5718996 sebp/elk:630 /usr/local/bin/star\u2026 5ccaadeeafe7 qaprosoft/rabbitmq:latest docker-entrypoint.s\u2026 922b75b2849a selenium/standalone-chrome:latest /opt/bin/entry_poin\u2026 e8a2d32590ed qaprosoft/postgres:9.6 docker-entrypoint.s\u2026 Open Zafira in your browser: http://localhost:80/app Use default credentials to login: qpsdemo/qpsdemo","title":"Startup in Docker"},{"location":"integrations/","text":"Integration Zafira is integrated with multiple third-party tools such as Amazon, Slack, Gmail, etc. You can add new integration to a working Zafira without having to restart the web application. Navigate to the Integrations icon in the sidebar menu: On the Integrations page, you will find several blocks responsible for different integration modules. Please note that the HTTP / HTTPS security model may affect your integration URL. Amazon Zafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira. Create new S3 bucket in region you prefer Navigate to bucket permissions, CORS configuration and set following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create new IAM user with Programmatic access Grant read / write permissions for the new user (see [Detailed Guide] (https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket)) Generate new access / secret keys. Enable Amazon integration and provide access / secret keys and the name of the bucket you created. Click save, a green light indicates the correct integration status. Email Zafira provides functionality for sending test results, widgets, and dashboards via email. You must provide correct SMTP credentials to enable this feature. We mainly use Gmail for these purposes. You can use the configuration below by replacing your email address and password with valid Gmail credentials. User invitations and Forgot password feature also require SMTP integration. Enable email integration. Specify the correct SMTP host and port. Provide valid Gmail credentials. Click save, a green light indicates the correct integration status. Jenkins Jenkins integration is used for launching new builds and collecting test jobs configurations during the startup. Zafira also provides remote debugging and launcher functionality with Jenkins integration enabled. To integrate Jenkins, follow these steps: Create new user with READ, RUN access for jobs. Create an access token (see [instruction] (https://support.cloudbees.com/hc/en-us/articles/115003090592-How-to-re-generate-my-Jenkins-user-token)). Paste Jenkins URL, username and token to Zafira. Click save, a green light indicates the correct integration status. Jira Jira integration allows you to track known issue status for the failed test cases. When you assign a known issue to constantly failing test cases, you can specify the appropriate Jira ticket. If integration with Jira is enabled, Zafira will check the current ticket status and track the failure as a known issue if the ticket is opened, and as unknown if it is closed, so you will never lose regression bugs. Paste Jira URL, username and password to Zafira. List a set of statuses that indicates that the ticket is closed. Click save, a green light indicates the correct integration status. LDAP Zafira supports LDAP authentication: the first time you successfully log in using LDAP, Zafira will register user data in its own database. The admin will be able to manage user permissions for each new user who comes via LDAP. Use configuration below as a reference for your LDAP connection setup Click save, a green light indicates the correct integration status SLACK Zafira is capable to post automation results into specific Slack channels for better visibility. If integration is set up correctly after test run is finished notification with run details will be sent into appropriate channel. Such Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins. After user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run. In order to setup Slack integration follow the next steps: Generate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page. Click save, a green light indicates the correct integration status. GOOGLE Integration with Google provides the ability to export test run results to spreadsheets. It also allows you to use client-side spreadsheet data using temporary credentials provided by Zafira API (GET: /api/settings/google/creds). To set up integration with Google, follow these steps: Generate Google service account key (as a file) and attach it by clicking the UPLOAD CLIENT SECRET ORIGIN button in GOOGLE block on Zafira integrations page. Click Upload , a green light indicates the correct integration status RABBITMQ RabbitMQ integration is used to provide Zafira with the ability to display test logs. Integration is the gateway to transferring logs to Zafira. Follow these steps to configure RabbitMQ integration: Enable RabbitMQ integration. Specify the correct host and port. Provide valid credentials. Click save, a green light indicates the correct integration status. SELENIUM Zafira uses Selenium integration in the launcher functionality scope. It provides Selenium server URL used by Jenkins to determine which Selenium instance is preferred for tests launch. To configure Selenium integration, follow these steps: Enable Selenium Integration. Enter a valid URL. Provide valid credentials if necessary. Click save, a green light indicates the correct integration status. TESTRAIL TestRail integration is used to build links leading to TestRail test cases from Zafira test tags. The provided tag key must be TESTRAIL_TESTCASE_UUID as a key, and the internal Testrail test case identifier as a value (for example, 34-66-45465, where 34 - TestRail project ID, 66 - TestRail test suite, 45465 - TestRail test case ID). To configure TestRail integration, follow these steps: Add the TestRail service URL as the parameter URL to the TESTRAIL block on Zafira integrations page. Click save, a green light indicates the correct integration status. QTEST Zafira supports integration with qTest to build links leading to qTest test cases from Zafira test tags. Provided tag key must be QTEST_TESTCASE_UUID, the value is the internal qTest test case identifier (for example, 454-2423, where 454 - qTest project ID, 2423 - qTest test case ID). To configure qTest integration follow these steps: Add qTest service URL as the parameter URL to the QTEST block on Zafira integrations page. Click save, a green light indicates the correct integration status.","title":"Integrations"},{"location":"integrations/#integration","text":"Zafira is integrated with multiple third-party tools such as Amazon, Slack, Gmail, etc. You can add new integration to a working Zafira without having to restart the web application. Navigate to the Integrations icon in the sidebar menu: On the Integrations page, you will find several blocks responsible for different integration modules. Please note that the HTTP / HTTPS security model may affect your integration URL.","title":"Integration"},{"location":"integrations/#amazon","text":"Zafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira. Create new S3 bucket in region you prefer Navigate to bucket permissions, CORS configuration and set following policy: ?xml version= 1.0 encoding= UTF-8 ? CORSConfiguration xmlns= http://s3.amazonaws.com/doc/2006-03-01/ CORSRule AllowedOrigin * /AllowedOrigin AllowedMethod GET /AllowedMethod AllowedMethod POST /AllowedMethod MaxAgeSeconds 3000 /MaxAgeSeconds AllowedHeader * /AllowedHeader /CORSRule /CORSConfiguration Create new IAM user with Programmatic access Grant read / write permissions for the new user (see [Detailed Guide] (https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket)) Generate new access / secret keys. Enable Amazon integration and provide access / secret keys and the name of the bucket you created. Click save, a green light indicates the correct integration status.","title":"Amazon"},{"location":"integrations/#email","text":"Zafira provides functionality for sending test results, widgets, and dashboards via email. You must provide correct SMTP credentials to enable this feature. We mainly use Gmail for these purposes. You can use the configuration below by replacing your email address and password with valid Gmail credentials. User invitations and Forgot password feature also require SMTP integration. Enable email integration. Specify the correct SMTP host and port. Provide valid Gmail credentials. Click save, a green light indicates the correct integration status.","title":"Email"},{"location":"integrations/#jenkins","text":"Jenkins integration is used for launching new builds and collecting test jobs configurations during the startup. Zafira also provides remote debugging and launcher functionality with Jenkins integration enabled. To integrate Jenkins, follow these steps: Create new user with READ, RUN access for jobs. Create an access token (see [instruction] (https://support.cloudbees.com/hc/en-us/articles/115003090592-How-to-re-generate-my-Jenkins-user-token)). Paste Jenkins URL, username and token to Zafira. Click save, a green light indicates the correct integration status.","title":"Jenkins"},{"location":"integrations/#jira","text":"Jira integration allows you to track known issue status for the failed test cases. When you assign a known issue to constantly failing test cases, you can specify the appropriate Jira ticket. If integration with Jira is enabled, Zafira will check the current ticket status and track the failure as a known issue if the ticket is opened, and as unknown if it is closed, so you will never lose regression bugs. Paste Jira URL, username and password to Zafira. List a set of statuses that indicates that the ticket is closed. Click save, a green light indicates the correct integration status.","title":"Jira"},{"location":"integrations/#ldap","text":"Zafira supports LDAP authentication: the first time you successfully log in using LDAP, Zafira will register user data in its own database. The admin will be able to manage user permissions for each new user who comes via LDAP. Use configuration below as a reference for your LDAP connection setup Click save, a green light indicates the correct integration status","title":"LDAP"},{"location":"integrations/#slack","text":"Zafira is capable to post automation results into specific Slack channels for better visibility. If integration is set up correctly after test run is finished notification with run details will be sent into appropriate channel. Such Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins. After user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run. In order to setup Slack integration follow the next steps: Generate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page. Click save, a green light indicates the correct integration status.","title":"SLACK"},{"location":"integrations/#google","text":"Integration with Google provides the ability to export test run results to spreadsheets. It also allows you to use client-side spreadsheet data using temporary credentials provided by Zafira API (GET: /api/settings/google/creds). To set up integration with Google, follow these steps: Generate Google service account key (as a file) and attach it by clicking the UPLOAD CLIENT SECRET ORIGIN button in GOOGLE block on Zafira integrations page. Click Upload , a green light indicates the correct integration status","title":"GOOGLE"},{"location":"integrations/#rabbitmq","text":"RabbitMQ integration is used to provide Zafira with the ability to display test logs. Integration is the gateway to transferring logs to Zafira. Follow these steps to configure RabbitMQ integration: Enable RabbitMQ integration. Specify the correct host and port. Provide valid credentials. Click save, a green light indicates the correct integration status.","title":"RABBITMQ"},{"location":"integrations/#selenium","text":"Zafira uses Selenium integration in the launcher functionality scope. It provides Selenium server URL used by Jenkins to determine which Selenium instance is preferred for tests launch. To configure Selenium integration, follow these steps: Enable Selenium Integration. Enter a valid URL. Provide valid credentials if necessary. Click save, a green light indicates the correct integration status.","title":"SELENIUM"},{"location":"integrations/#testrail","text":"TestRail integration is used to build links leading to TestRail test cases from Zafira test tags. The provided tag key must be TESTRAIL_TESTCASE_UUID as a key, and the internal Testrail test case identifier as a value (for example, 34-66-45465, where 34 - TestRail project ID, 66 - TestRail test suite, 45465 - TestRail test case ID). To configure TestRail integration, follow these steps: Add the TestRail service URL as the parameter URL to the TESTRAIL block on Zafira integrations page. Click save, a green light indicates the correct integration status.","title":"TESTRAIL"},{"location":"integrations/#qtest","text":"Zafira supports integration with qTest to build links leading to qTest test cases from Zafira test tags. Provided tag key must be QTEST_TESTCASE_UUID, the value is the internal qTest test case identifier (for example, 454-2423, where 454 - qTest project ID, 2423 - qTest test case ID). To configure qTest integration follow these steps: Add qTest service URL as the parameter URL to the QTEST block on Zafira integrations page. Click save, a green light indicates the correct integration status.","title":"QTEST"},{"location":"lifecycle/","text":"Lifecycle Schema below illustrates general test run flow that should be followed for new listeners implmentation: Step 1: Refresh token POST: /zafira-ws/api/auth/refresh Request { refreshToken : eyJhbGciOiJIUzUxMiJ9... } Field Datatype Description refreshToken String token obtained by generation Response { type : Bearer , accessToken : eyJhbGciOiJIUzUMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi... , expiresIn : 300, tenant : zafira } Field Datatype Description type String Type of authorization accessToken String Refreshed token we need for headers expiresIn int Expiration time of new token refreshToken String Token tenant String Tenant name Step 2: Get user profile GET: /zafira-ws/api/users/profile?username={username} Headers: Authorization=Bearer {accessToken} Request None Response { id :2, username : admin , password : zRNkEjrbdBB70DVZA1leMqdJy+9uJCpK , roles :[ ROLE_ADMIN ], permissions :[{ id :1, modifiedAt :null, createdAt :null, name : VIEW_HIDDEN_DASHBOARDS , block :null }], preferences :[{ id :6, modifiedAt :1544195439376, createdAt :1544195439376, name : THEME , value : 32 }], lastLogin :1544617640554, source : INTERNAL , status : ACTIVE } Field Datatype Description id int Unique user identifier username String Credentials password String Credentials roles String array user roles(\"ROLE_ADMIN\", \"ROLE_ADMIN\", \"ROLE_SUPERADMIN\") permissions Object List List of user permissions preferences Object List List of user preferences lastLogin Date Date of users last login source Object \"INTERNAL\", \"LDAP\" status Object Logged in or not(\"ACTIVE\",\"INACTIVE\") Step 3: Create a test suite POST: /zafira-ws/api/tests/suites Headers: Authorization=Bearer {accessToken} Request { fileName : ExampleFileName , name : ExampleSuiteName , userId : 2 } Field Datatype Description userId int Unique user identifier fileName String Name of XML suite name String Suite name Response { id : 8, name : ExampleSuiteName , fileName : ExampleFileName , userId : 2 } Field Datatype Description id int Unique test suite identifier name String Suite name fileName String Name of XML suite userId int Unique user identifier Step 4: Create a job POST: /zafira-ws/api/jobs Headers: Authorization=Bearer {accessToken} Request { jenkinsHost : ExampleJenkinsHost , jobURL : ExampleJobURL , name : ExampleJobName , userId : 2 } Field Datatype Description jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique test suite identifier Response { id : 8, name : ExampleJobName , jobURL : ExampleJobURL , jenkinsHost : ExampleJenkinsHost , userId : 2 } Field Datatype Description id int Unique job identifier jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique user identifier Step 5: Create a test run POST: /zafira-ws/api/tests/runs Headers: Authorization=Bearer {accessToken} Request { buildNumber : 0, jobId : 8, startedBy : HUMAN , testSuiteId : 8 } Field Datatype Description jobId int Unique job identifier testSuiteId int Unique test suite identifier buildNumber int Build number startedBy String One of the values : \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : IN_PROGRESS , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : false, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id jobId int Job id testSuiteId int Unique test suite identifier buildNumber int Build number blocker bool Unexpected behavior that keeps you from performing all test case steps knownIssue bool Failing reason in ticket reviewed bool Shows whether a test has been reviewed status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Step 6: Create a test case POST: /zafira-ws/api/tests/cases Headers: Authorization=Bearer {accessToken} Request { primaryOwnerId : 2, testClass : ExampleTestClassName , testMethod : ExampleTestName , testSuiteId : 8 } Field Datatype Description primaryOwnerId int Unique identifier of test case creator testClass String Name of test class testMethod String Name of test method testSuiteId int Unique test suite identifier Response { id : 23, testClass : ExampleTestClassName , testMethod : ExampleTestMethod , testSuiteId : 8, primaryOwnerId : 2 } Field Datatype Description id int Unique identifier of test case primaryOwnerId int Unique identifier of test case creator testClass String Name of test class testMethod String Name of test method testSuiteId int Unique test suite identifier Step 7: Start a test POST: /zafira-ws/api/tests Headers: Authorization=Bearer {accessToken} Request { name : ExampleTestName , status : IN_PROGRESS , testCaseId : 23, testRunId : 62 } Field Datatype Description testRunId int Unique test run identifier testCaseId int Unique identifier of test case name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Response { id : 222, name : ExampleTestName , status : IN_PROGRESS , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : false, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc) Step 8: Finish a test POST: /zafira-ws/api/tests/{testId}/finish Headers: Authorization=Bearer {accessToken} Request { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc) Response { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc) Step 9: Finish a test run POST: /zafira-ws/api/tests/runs/{testRunId}/finish Headers: Authorization=Bearer {accessToken} Request None Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : FAILED , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : true, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id testSuiteId int Unique test suite identifier status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") jobId int Job id buildNumber int Build number startedBy String One of the values : \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps reviewed bool Shows whether a test has been reviewed","title":"Lifecycle"},{"location":"lifecycle/#lifecycle","text":"Schema below illustrates general test run flow that should be followed for new listeners implmentation:","title":"Lifecycle"},{"location":"lifecycle/#step-1-refresh-token","text":"POST: /zafira-ws/api/auth/refresh Request { refreshToken : eyJhbGciOiJIUzUxMiJ9... } Field Datatype Description refreshToken String token obtained by generation Response { type : Bearer , accessToken : eyJhbGciOiJIUzUMiJ9... , refreshToken : eyJhbGciOiJIUzUxMi... , expiresIn : 300, tenant : zafira } Field Datatype Description type String Type of authorization accessToken String Refreshed token we need for headers expiresIn int Expiration time of new token refreshToken String Token tenant String Tenant name","title":"Step 1: Refresh token"},{"location":"lifecycle/#step-2-get-user-profile","text":"GET: /zafira-ws/api/users/profile?username={username} Headers: Authorization=Bearer {accessToken} Request None Response { id :2, username : admin , password : zRNkEjrbdBB70DVZA1leMqdJy+9uJCpK , roles :[ ROLE_ADMIN ], permissions :[{ id :1, modifiedAt :null, createdAt :null, name : VIEW_HIDDEN_DASHBOARDS , block :null }], preferences :[{ id :6, modifiedAt :1544195439376, createdAt :1544195439376, name : THEME , value : 32 }], lastLogin :1544617640554, source : INTERNAL , status : ACTIVE } Field Datatype Description id int Unique user identifier username String Credentials password String Credentials roles String array user roles(\"ROLE_ADMIN\", \"ROLE_ADMIN\", \"ROLE_SUPERADMIN\") permissions Object List List of user permissions preferences Object List List of user preferences lastLogin Date Date of users last login source Object \"INTERNAL\", \"LDAP\" status Object Logged in or not(\"ACTIVE\",\"INACTIVE\")","title":"Step 2: Get user profile"},{"location":"lifecycle/#step-3-create-a-test-suite","text":"POST: /zafira-ws/api/tests/suites Headers: Authorization=Bearer {accessToken} Request { fileName : ExampleFileName , name : ExampleSuiteName , userId : 2 } Field Datatype Description userId int Unique user identifier fileName String Name of XML suite name String Suite name Response { id : 8, name : ExampleSuiteName , fileName : ExampleFileName , userId : 2 } Field Datatype Description id int Unique test suite identifier name String Suite name fileName String Name of XML suite userId int Unique user identifier","title":"Step 3: Create a test suite"},{"location":"lifecycle/#step-4-create-a-job","text":"POST: /zafira-ws/api/jobs Headers: Authorization=Bearer {accessToken} Request { jenkinsHost : ExampleJenkinsHost , jobURL : ExampleJobURL , name : ExampleJobName , userId : 2 } Field Datatype Description jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique test suite identifier Response { id : 8, name : ExampleJobName , jobURL : ExampleJobURL , jenkinsHost : ExampleJenkinsHost , userId : 2 } Field Datatype Description id int Unique job identifier jenkinsHost String Jenkins host jobURL String Job url name String Job name userId int Unique user identifier","title":"Step 4: Create a job"},{"location":"lifecycle/#step-5-create-a-test-run","text":"POST: /zafira-ws/api/tests/runs Headers: Authorization=Bearer {accessToken} Request { buildNumber : 0, jobId : 8, startedBy : HUMAN , testSuiteId : 8 } Field Datatype Description jobId int Unique job identifier testSuiteId int Unique test suite identifier buildNumber int Build number startedBy String One of the values : \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : IN_PROGRESS , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : false, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id jobId int Job id testSuiteId int Unique test suite identifier buildNumber int Build number blocker bool Unexpected behavior that keeps you from performing all test case steps knownIssue bool Failing reason in ticket reviewed bool Shows whether a test has been reviewed status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\")","title":"Step 5: Create a test run"},{"location":"lifecycle/#step-6-create-a-test-case","text":"POST: /zafira-ws/api/tests/cases Headers: Authorization=Bearer {accessToken} Request { primaryOwnerId : 2, testClass : ExampleTestClassName , testMethod : ExampleTestName , testSuiteId : 8 } Field Datatype Description primaryOwnerId int Unique identifier of test case creator testClass String Name of test class testMethod String Name of test method testSuiteId int Unique test suite identifier Response { id : 23, testClass : ExampleTestClassName , testMethod : ExampleTestMethod , testSuiteId : 8, primaryOwnerId : 2 } Field Datatype Description id int Unique identifier of test case primaryOwnerId int Unique identifier of test case creator testClass String Name of test class testMethod String Name of test method testSuiteId int Unique test suite identifier","title":"Step 6: Create a test case"},{"location":"lifecycle/#step-7-start-a-test","text":"POST: /zafira-ws/api/tests Headers: Authorization=Bearer {accessToken} Request { name : ExampleTestName , status : IN_PROGRESS , testCaseId : 23, testRunId : 62 } Field Datatype Description testRunId int Unique test run identifier testCaseId int Unique identifier of test case name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") Response { id : 222, name : ExampleTestName , status : IN_PROGRESS , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : false, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc)","title":"Step 7: Start a test"},{"location":"lifecycle/#step-8-finish-a-test","text":"POST: /zafira-ws/api/tests/{testId}/finish Headers: Authorization=Bearer {accessToken} Request { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc) Response { id : 222, name : ExampleTestName , status : FAILED , testRunId : 62, testCaseId : 8, retry : 0, knownIssue : true, blocker : false, needRerun : false, artifacts : [] } Field Datatype Description id int Unique test identifier name String Test name status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") testRunId int Unique test run identifier testCaseId int Unique identifier of test case retry int Shows the count the test ran knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps needRerun bool Flag that indicates whether a reran is needed artifacts Object array List of test artifacts(logs, screenshots etc)","title":"Step 8: Finish a test"},{"location":"lifecycle/#step-9-finish-a-test-run","text":"POST: /zafira-ws/api/tests/runs/{testRunId}/finish Headers: Authorization=Bearer {accessToken} Request None Response { id : 62, ciRunId : e6d88798f-d833-5sgfd-9127-56b602d82599 , testSuiteId : 8, status : FAILED , jobId : 8, buildNumber : 0, startedBy : HUMAN , knownIssue : true, blocker : false, reviewed : false } Field Datatype Description id int Unique test run identifier ciRunId String CI run id testSuiteId int Unique test suite identifier status String Test run status (\"UNKNOWN\", \"IN_PROGRESS\", \"PASSED\", \"FAILED\", \"SKIPPED\", \"ABORTED\", \"QUEUED\") jobId int Job id buildNumber int Build number startedBy String One of the values : \"SCHEDULER\", \"UPSTREAM_JOB\", \"HUMAN\" knownIssue bool Failing reason in ticket blocker bool Unexpected behavior that keeps you from performing all test case steps reviewed bool Shows whether a test has been reviewed","title":"Step 9: Finish a test run"},{"location":"profile/","text":"Profile Click the profile icon in the lower-left corner of the page to open your User profile . If you want to change the profile photo, navigate to the same icon on your profile page to upload it. In Personal data area displays a user's personal information. Username and Email both are set when creating a profile and cannot be changed, First Name and Last Name are editable. In Access token area integration data could be obtained. Copy Service URL and Access token (previously generated) to get integrated with Zafira. In Change password menu there are fields for updating the current password. The new password must contain at least 5 characters, which can be letters, numbers, special characters.","title":"Profile"},{"location":"profile/#profile","text":"Click the profile icon in the lower-left corner of the page to open your User profile . If you want to change the profile photo, navigate to the same icon on your profile page to upload it. In Personal data area displays a user's personal information. Username and Email both are set when creating a profile and cannot be changed, First Name and Last Name are editable. In Access token area integration data could be obtained. Copy Service URL and Access token (previously generated) to get integrated with Zafira. In Change password menu there are fields for updating the current password. The new password must contain at least 5 characters, which can be letters, numbers, special characters.","title":"Profile"},{"location":"releases/","text":"Release notes 3.3.37 (2018-11-15) Enhancements Migrated to new Echarts library Improved widget management on the dashboard page Migrated to html2canvas for dashboards screenshoting Removed SeleniumSerice and dependency on selenium container Fixes Fix all security vulnerabilities provided by Github Minor UI fixed on test runs page: #1175, #1187, #1189, #1173 [DEPENDENCIES UPDATES] spring 4.3.20.RELEASE spring-security.version 4.2.9.RELEASE jackson. 2.9.7 tomcat 7.0.91 amqp-client.version 4.9.0 3.3.36 (2018-11-01) Enhancements Implemented test grouping functionality based on test package or class Implemented test filtering based on the actual test result Improved the way of navigation to test details, now are staying in the same window having the ability to go back saving test results revision context Implemented AWS Cloud Front integration for more secured way of publishing artifacts and providing access for them Fixes Now test artifacts do not contain unused links like Video and VNC Cleared obsolete links from Zafira emailable reports Fixed problem with short-term links generation for S3 artifacts [DEPENDENCIES UPDATES] N/A","title":"Release notes"},{"location":"releases/#release-notes","text":"","title":"Release notes"},{"location":"releases/#3337-2018-11-15","text":"","title":"3.3.37 (2018-11-15)"},{"location":"releases/#enhancements","text":"Migrated to new Echarts library Improved widget management on the dashboard page Migrated to html2canvas for dashboards screenshoting Removed SeleniumSerice and dependency on selenium container","title":"Enhancements"},{"location":"releases/#fixes","text":"Fix all security vulnerabilities provided by Github Minor UI fixed on test runs page: #1175, #1187, #1189, #1173","title":"Fixes"},{"location":"releases/#dependencies-updates","text":"spring 4.3.20.RELEASE spring-security.version 4.2.9.RELEASE jackson. 2.9.7 tomcat 7.0.91 amqp-client.version 4.9.0","title":"[DEPENDENCIES UPDATES]"},{"location":"releases/#3336-2018-11-01","text":"","title":"3.3.36 (2018-11-01)"},{"location":"releases/#enhancements_1","text":"Implemented test grouping functionality based on test package or class Implemented test filtering based on the actual test result Improved the way of navigation to test details, now are staying in the same window having the ability to go back saving test results revision context Implemented AWS Cloud Front integration for more secured way of publishing artifacts and providing access for them","title":"Enhancements"},{"location":"releases/#fixes_1","text":"Now test artifacts do not contain unused links like Video and VNC Cleared obsolete links from Zafira emailable reports Fixed problem with short-term links generation for S3 artifacts","title":"Fixes"},{"location":"releases/#dependencies-updates_1","text":"N/A","title":"[DEPENDENCIES UPDATES]"},{"location":"test_runs/","text":"Test runs","title":"Test runs"},{"location":"test_runs/#test-runs","text":"","title":"Test runs"},{"location":"user_management/","text":"User management","title":"User management"},{"location":"user_management/#user-management","text":"","title":"User management"}]}